class Solution {
    vector<int> parent, size;
    int find(int i) {
        if (i != parent[i])
            parent[i] = find(parent[i]);
        return parent[i];
    }

    void unite(int a, int b) {
        int pa = find(a), pb = find(b);

        if (pa == pb)
            return;

        if (size[pa] < size[pb])
            swap(pa, pb);

        parent[pb] = pa;
        size[pa] += size[pb];
    }

public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();

        parent.resize(n);
        iota(parent.begin(), parent.end(), 0);

        size.assign(n, 1);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1)
                    unite(i, j);
            }
        }

        unordered_map<int, int> CompSize;
        for (int i = 0; i < n; i++)
            CompSize[find(i)] = size[find(i)];

        unordered_map<int, int> infected_count;
        for (int i : initial)
            infected_count[find(i)]++;

        sort(initial.begin(), initial.end());

        int maxSize = -1, ans = -1;
        for (int i : initial) {
            if (infected_count[find(i)] == 1) {
                if (size[find(i)] > maxSize) {
                    maxSize = size[find(i)];
                    ans = i;
                }
            }
        }

        if (ans == -1)
            return initial[0];

        return ans;
    }
};